{
	"info": {
		"_postman_id": "997950d7-cc2f-4f6c-be79-9a306ed83fff",
		"name": "Unnati_Api_Teting",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "46482948"
	},
	"item": [
		{
			"name": "LoginApi",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"// Status code\r",
							"pm.test(\"verify Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Verify User ID\r",
							"pm.test(\"User ID is admin\", function () {\r",
							"    pm.expect(jsonData.id).to.eql(\"admin\");\r",
							"});\r",
							"\r",
							"// Verify Login ID\r",
							"pm.test(\"Login ID is correct\", function () {\r",
							"    pm.expect(jsonData.loginId).to.eql(\"admin@applicate.in\");\r",
							"});\r",
							"\r",
							"// Verify Email\r",
							"pm.test(\"Email is correct\", function () {\r",
							"    pm.expect(jsonData.email).to.eql(\"hemant.bansal@salescode.ai\");\r",
							"});\r",
							"\r",
							"// Verify Active Status\r",
							"pm.test(\"User is active\", function () {\r",
							"    pm.expect(jsonData.activeStatus).to.eql(\"active\");\r",
							"});\r",
							"\r",
							"// Verify Role ID in roles array\r",
							"pm.test(\"Role ID is role_admin\", function () {\r",
							"    pm.expect(jsonData.roles[0].id).to.eql(\"role_admin\");\r",
							"});\r",
							"\r",
							"// Verify Role Active Status\r",
							"pm.test(\"Role Active Status is inactive\", function () {\r",
							"    pm.expect(jsonData.roles[0].activeStatus).to.eql(\"inactive\");\r",
							"});\r",
							"\r",
							"// Verify Extended Attribute maxIosVersion\r",
							"pm.test(\"maxIosVersion is 0.0\", function () {\r",
							"    pm.expect(jsonData.extendedAttributes.maxIosVersion).to.eql(\"0.0\");\r",
							"});\r",
							"\r",
							"// Verify Designation\r",
							"pm.test(\"Designation is admin\", function () {\r",
							"    pm.expect(jsonData.designation[0]).to.eql(\"admin\");\r",
							"});\r",
							"\r",
							"// Verify User is verified\r",
							"pm.test(\"User is verified\", function () {\r",
							"    pm.expect(jsonData.verified).to.be.true;\r",
							"});\r",
							"\r",
							"// Verify User is not blocked\r",
							"pm.test(\"User is not blocked\", function () {\r",
							"    pm.expect(jsonData.blocked).to.be.false;\r",
							"});\r",
							"\r",
							"// Verify Active Notification Channels contain email and firebase\r",
							"pm.test(\"Notification Channels are correct\", function () {\r",
							"    pm.expect(jsonData.activeNotificationChannels).to.include(\"email\");\r",
							"    pm.expect(jsonData.activeNotificationChannels).to.include(\"firebase\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/login/user",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"login",
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "UploadTarget_Api",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"// Get current date\r",
							"let currentDate = new Date();\r",
							"\r",
							"// Subtract 1 month\r",
							"currentDate.setMonth(currentDate.getMonth() - 1);\r",
							"\r",
							"// Get Year\r",
							"let year = currentDate.getFullYear();\r",
							"\r",
							"// Get Month Abbreviation Array\r",
							"const monthNames = [\"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUN\",\r",
							"                    \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"];\r",
							"\r",
							"\r",
							"// Get Month in Abbreviation\r",
							"let monthAbbreviation = monthNames[currentDate.getMonth()];\r",
							"\r",
							"// Save as Collection Variables\r",
							"pm.environment.set(\"Year\", year.toString());\r",
							"pm.environment.set(\"previousMonthAbbr\", monthAbbreviation);\r",
							"\r",
							"// Generate Random 2-digit number (10 to 99)\r",
							"let randomTwoDigitNumber1 = Math.floor(Math.random() * 90) + 10;\r",
							"// Convert to decimal with .00 format\r",
							"let formattedNumber1 = Number(randomTwoDigitNumber1).toFixed(2); \r",
							"// Save as Collection Variable\r",
							"pm.collectionVariables.set(\"random2Digit1\", formattedNumber1);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"let responseData = pm.response.json();\r",
							"let responseFeatureInput = responseData.features[0].input;\r",
							"let expectedYear = pm.environment.get(\"Year\");\r",
							"let expectedMonth = pm.environment.get(\"previousMonthAbbr\");\r",
							"\r",
							"// Validate YEAR\r",
							"pm.test(\"YEAR in response matches Global Variable\", function () {\r",
							"    pm.expect(responseFeatureInput.YEAR.toString()).to.eql(expectedYear);\r",
							"});\r",
							"\r",
							"// Validate MONTH\r",
							"pm.test(\"MONTH in response matches Global Variable\", function () {\r",
							"    pm.expect(responseFeatureInput.MONTH).to.eql(expectedMonth);\r",
							"});\r",
							"\r",
							"// Validate Status is Success\r",
							"pm.test(\"Status should be Success\", function () {\r",
							"    pm.expect(responseData.features[0].status).to.eql(\"Success\");\r",
							"});\r",
							"\r",
							"// Validate Response.done is true\r",
							"pm.test(\"Response.done should be true\", function () {\r",
							"    pm.expect(responseData.features[0].response.done).to.be.true;\r",
							"});\r",
							"\r",
							"// Validate Error is Empty\r",
							"pm.test(\"Error should be empty\", function () {\r",
							"    pm.expect(responseData.features[0].error).to.eql(\"\");\r",
							"});\r",
							"const ExpectedjsonSchema =\r",
							"{\r",
							"  \r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"features\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"input\": {\r",
							"              \"type\": \"object\",\r",
							"              \"properties\": {\r",
							"                \"YEAR\": {\r",
							"                  \"type\": \"integer\"\r",
							"                },\r",
							"                \"MONTH\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"UID\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"SIFY_ID\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"LOYALTY_TYPE\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"TARGET_TYPE\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"TARGET_VALUE\": {\r",
							"                  \"type\": \"number\"\r",
							"                },\r",
							"                \"SALES_VALUE\": {\r",
							"                  \"type\": \"number\"\r",
							"                },\r",
							"                \"WDDEST\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"CAL_YEAR\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"PICKUPSTATUS\": {\r",
							"                  \"type\": \"integer\"\r",
							"                },\r",
							"                \"targetId\": {\r",
							"                  \"type\": \"string\"\r",
							"                }\r",
							"              },\r",
							"              \"required\": [\r",
							"                \"YEAR\",\r",
							"                \"MONTH\",\r",
							"                \"UID\",\r",
							"                \"SIFY_ID\",\r",
							"                \"LOYALTY_TYPE\",\r",
							"                \"TARGET_TYPE\",\r",
							"                \"TARGET_VALUE\",\r",
							"                \"SALES_VALUE\",\r",
							"                \"WDDEST\",\r",
							"                \"CAL_YEAR\",\r",
							"                \"PICKUPSTATUS\",\r",
							"                \"targetId\"\r",
							"              ]\r",
							"            },\r",
							"            \"retryCount\": {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            \"status\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"response\": {\r",
							"              \"type\": \"object\",\r",
							"              \"properties\": {\r",
							"                \"cancelled\": {\r",
							"                  \"type\": \"boolean\"\r",
							"                },\r",
							"                \"done\": {\r",
							"                  \"type\": \"boolean\"\r",
							"                }\r",
							"              },\r",
							"              \"required\": [\r",
							"                \"cancelled\",\r",
							"                \"done\"\r",
							"              ]\r",
							"            },\r",
							"            \"error\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"attempt\": {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"input\",\r",
							"            \"retryCount\",\r",
							"            \"status\",\r",
							"            \"response\",\r",
							"            \"error\",\r",
							"            \"attempt\"\r",
							"          ]\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"features\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test(\"verify Response body is valid JSON\", function () \r",
							"{\r",
							"    pm.response.to.have.jsonSchema(ExpectedjsonSchema);\r",
							"});\r",
							"pm.test(\"verify Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}"
					},
					{
						"key": "Content-Type",
						"value": "{{content}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"groupId\": \"2025-08-11\",\n    \"lob\": \"unnati\",\n    \"transformerInfo\": [\n        {\n            \"entityName\": \"Targets\",\n            \"transformerId\": \"TargetIntegrate\",\n             \"preprocessValidationExcludeGroup\":\"target_validation_exclude\",\n            \"operationType\": \"insert\"\n        }\n    ],\n    \"features\": [\n        {\n             \"YEAR\":{{Year}},\n            \"MONTH\": \"{{previousMonthAbbr}}\",\n            \"UID\": \"ecal-fc-0390\",\n            \"SIFY_ID\": \"ER2194CHE00467\",\n            \"LOYALTY_TYPE\": \"fc foods\",\n            \"TARGET_TYPE\": \"Overall Business\",\n            \"TARGET_VALUE\": 20.00,\n            \"SALES_VALUE\": 55.00,\n            \"WDDEST\": \"ER2194\",\n            \"CAL_YEAR\": \"{{Year}}\",\n            \"PICKUPSTATUS\": 0,\n            \"targetId\": \"ecal-fc-0390:{{previousMonthAbbr}}:{{Year}}:Overall Business:fc foods\"\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/streamlet",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"streamlet"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateTarget",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseData = pm.response.json();\r",
							"let responseFeatureInput = responseData.features[0].input;\r",
							"let expectedYear = pm.environment.get(\"Year\");\r",
							"let expectedMonth = pm.environment.get(\"previousMonthAbbr\");\r",
							"\r",
							"// Validate YEAR\r",
							"pm.test(\"YEAR in response matches Global Variable\", function () {\r",
							"    pm.expect(responseFeatureInput.YEAR.toString()).to.eql(expectedYear);\r",
							"});\r",
							"\r",
							"// Validate MONTH\r",
							"pm.test(\"MONTH in response matches Global Variable\", function () {\r",
							"    pm.expect(responseFeatureInput.MONTH).to.eql(expectedMonth);\r",
							"});\r",
							"\r",
							"// Validate Status is Success\r",
							"pm.test(\"Status should be Success\", function () {\r",
							"    pm.expect(responseData.features[0].status).to.eql(\"Success\");\r",
							"});\r",
							"\r",
							"// Validate Response.done is true\r",
							"pm.test(\"Response.done should be true\", function () {\r",
							"    pm.expect(responseData.features[0].response.done).to.be.true;\r",
							"});\r",
							"\r",
							"// Validate Error is Empty\r",
							"pm.test(\"Error should be empty\", function () {\r",
							"    pm.expect(responseData.features[0].error).to.eql(\"\");\r",
							"});\r",
							"const ExpectedjsonSchema =\r",
							"{\r",
							"  \r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"features\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"input\": {\r",
							"              \"type\": \"object\",\r",
							"              \"properties\": {\r",
							"                \"YEAR\": {\r",
							"                  \"type\": \"integer\"\r",
							"                },\r",
							"                \"MONTH\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"UID\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"SIFY_ID\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"LOYALTY_TYPE\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"TARGET_TYPE\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"TARGET_VALUE\": {\r",
							"                  \"type\": \"number\"\r",
							"                },\r",
							"                \"SALES_VALUE\": {\r",
							"                  \"type\": \"number\"\r",
							"                },\r",
							"                \"WDDEST\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"CAL_YEAR\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"PICKUPSTATUS\": {\r",
							"                  \"type\": \"integer\"\r",
							"                },\r",
							"                \"targetId\": {\r",
							"                  \"type\": \"string\"\r",
							"                }\r",
							"              },\r",
							"              \"required\": [\r",
							"                \"YEAR\",\r",
							"                \"MONTH\",\r",
							"                \"UID\",\r",
							"                \"SIFY_ID\",\r",
							"                \"LOYALTY_TYPE\",\r",
							"                \"TARGET_TYPE\",\r",
							"                \"TARGET_VALUE\",\r",
							"                \"SALES_VALUE\",\r",
							"                \"WDDEST\",\r",
							"                \"CAL_YEAR\",\r",
							"                \"PICKUPSTATUS\",\r",
							"                \"targetId\"\r",
							"              ]\r",
							"            },\r",
							"            \"retryCount\": {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            \"status\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"response\": {\r",
							"              \"type\": \"object\",\r",
							"              \"properties\": {\r",
							"                \"cancelled\": {\r",
							"                  \"type\": \"boolean\"\r",
							"                },\r",
							"                \"done\": {\r",
							"                  \"type\": \"boolean\"\r",
							"                }\r",
							"              },\r",
							"              \"required\": [\r",
							"                \"cancelled\",\r",
							"                \"done\"\r",
							"              ]\r",
							"            },\r",
							"            \"error\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"attempt\": {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"input\",\r",
							"            \"retryCount\",\r",
							"            \"status\",\r",
							"            \"response\",\r",
							"            \"error\",\r",
							"            \"attempt\"\r",
							"          ]\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"features\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test(\"verify Response body is valid JSON\", function () \r",
							"{\r",
							"    pm.response.to.have.jsonSchema(ExpectedjsonSchema);\r",
							"});\r",
							"pm.test(\"verify Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate Random 2-digit number (10 to 99)\r",
							"let randomTwoDigitNumber1 = Math.floor(Math.random() * 90) + 10;\r",
							"// Convert to decimal with .00 format\r",
							"let formattedNumber1 = Number(randomTwoDigitNumber1).toFixed(2); \r",
							"// Save as Collection Variable\r",
							"pm.collectionVariables.set(\"random2Digit1\", formattedNumber1);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}"
					},
					{
						"key": "Content-Type",
						"value": "{{content}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"groupId\": \"2025-08-11\",\n    \"lob\": \"unnati\",\n    \"transformerInfo\": [\n        {\n            \"entityName\": \"Targets\",\n            \"transformerId\": \"TargetIntegrate\",\n             \"preprocessValidationExcludeGroup\":\"target_validation_exclude\",\n            \"operationType\": \"insert\"\n        }\n    ],\n    \"features\": [\n        {\n               \"YEAR\":{{Year}},\n            \"MONTH\": \"{{previousMonthAbbr}}\",\n            \"UID\": \"ecal-fc-0390\",\n            \"SIFY_ID\": \"ER2194CHE00467\",\n            \"LOYALTY_TYPE\": \"fc foods\",\n            \"TARGET_TYPE\": \"Overall Business\",\n            \"TARGET_VALUE\": {{random2Digit1}},\n            \"SALES_VALUE\": {{random2Digit1}},\n            \"WDDEST\": \"ER2194\",\n            \"CAL_YEAR\": \"{{Year}}\",\n            \"PICKUPSTATUS\": 0,\n            \"targetId\": \"ecal-fc-0390:{{previousMonthAbbr}}:{{Year}}:Overall Business:fc foods\"\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/streamlet",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"streamlet"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "previousYear",
			"value": ""
		},
		{
			"key": "previousMonthAbbr",
			"value": ""
		},
		{
			"key": "Year",
			"value": ""
		},
		{
			"key": "random2Digit",
			"value": ""
		},
		{
			"key": "random2Digit1",
			"value": ""
		},
		{
			"key": "random2Digit2",
			"value": ""
		}
	]
}